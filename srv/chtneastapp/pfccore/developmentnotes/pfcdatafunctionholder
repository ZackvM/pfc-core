class pfcapplication {
  public $responseCode = 400;  
  public $message = "";
  public $itemsFound = 0;
  public $rtnData = array();

function apprequest($request, $passedData, $rUsr, $rSess) {     
    $pDta = json_decode($passedData, true); 
    $sysid = chtndecrypt($pDta['systemid']);
    $logdUsr = chtndecrypt( $pDta['userid'] ); 
    $rqstParts = explode("/",$pDta['requested']);
    if ($sysid === "PFC-USER") {         

        //PFCMEMBER
        $pfrpMember = pfcmember($logdUsr);
        if ($pfrpMember['responseCode'] === 200) { 
            //PANEL MEMBER
            if (trim($rqstParts[3]) === "") { 
              $rqstPage = "memberapphome";
            } else { 
              parse_str(str_replace("?","", str_replace("-","",strtolower($rqstParts[3]))), $rqstDetermine);
              $rqstPage = $rqstDetermine['page'];        
            }            
            pfclogactivity($pfrpMember['memid'], $logdUsr, $pfrpMember['firstname'], $pfrpMember['lastname'], $pfrpMember['email'], $rqstPage);
            //CHECK PAGE EXISTS IN THIS USERS CONTEXT
           $allowedPages = ["memberapphome","membertemplate","projectlisting"];
           $pg = new pfcpages();
           if (in_array($rqstPage, $allowedPages)) { 
               //PULL PAGE
               $rtnPageArr = $pg->$rqstPage($pDta['requested'], $pfrpMember);
           } else { 
               //PULL NOT FOUND
               $rtnPageArr = $pg->notfound($rqstPage, $pfrpMember);
           }
           $this->message = $pfrpMember['memid'] . " " . $pfrpMember['firstname'];                        
        } 

        //GENERAL USER
        if ($pfrpMember['responseCode'] === 404) { 
            $pfrpid = setPFRPID($logdUsr);
            //GENERAL AUDIENCE
            if (trim($rqstParts[3]) === "") { 
              $rqstPage = "genuserapphome";
            } else { 
              parse_str(str_replace("?","", str_replace("-","",strtolower($rqstParts[3]))), $rqstDetermine);
              $rqstPage = $rqstDetermine['page'];        
            }             
            pfclogactivity(0, $logdUsr, "", "", "", $rqstPage);
            //CHECK PAGE EXISTS IN THIS USERS CONTEXT
            $allowedPages = ["genuserapphome","myprojects","submitnewproject"];
            $pg = new pfcpages();
            if (in_array($rqstPage, $allowedPages)) { 
               //PULL PAGE
               $rtnPageArr = $pg->$rqstPage($rqstPage, $pfrpMember, $pfrpid['pfrpid'],$rqstDetermine['projid']);               
            } else { 
               //PULL NOT FOUND
               $rtnPageArr = $pg->notfound($rqstPage, $pfrpMember);
            }                        
        }


        $this->rtnData = $rtnPageArr;
        $this->responseCode = 200;
    } else { 
        //SYSTEM IS NOT CORRECT
        $this->message = "NOT SYSTEM ID - FAILURE";
    }

    $rows['statusCode'] = $this->responseCode;
    $rows['data'] = array("MESSAGE" => "", "ITEMS" => $this->itemsFound, "DATA" => $this->rtnData);
    return $rows;
}    
    
function livestatuslist($request, $passedData, $rUsr, $rSession) { 
    $pDta = json_decode($passedData, true);
    $mem = pfcmember(chtndecrypt($pDta['pennkey']));  
    if ($mem['responseCode'] === 200) { 
      require(genAppFiles .  "/dataconn/sspdo.zck");
      $sql = "select stsTbl.datastatus, stsTbl.statusmodifier, stsTbl.projstatusdsp, rvwsts.furtherActionInd, rvwsts.completionActionInd from (select distinct projtostatus.datastatus, if(trim(ifnull(projtostatus.statusmodifier,''))='',projtostatus.datastatus,trim(ifnull(projtostatus.statusmodifier,''))) as statusmodifier, concat(ifnull(projtostatus.datastatus,''),if(ifnull(projtostatus.statusmodifier,'') = '', '', concat(' / ',ifnull(projtostatus.statusmodifier,'')))) projstatusdsp from ( SELECT prj.*, ps.statusid as joinstatid, projsts.* from pfc.ut_projects prj left join pfc.appdata_project_statuses ps on ps.statusid = (SELECT statusid FROM pfc.appdata_project_statuses  where projid = prj.projectid order by statusdate desc limit 1) left join pfc.appdata_project_statuses projsts on ps.statusid =  projsts.statusid) as projtostatus) as stsTbl left join pfc.appdata_project_reviewerstatus rvwsts on stsTbl.statusmodifier = rvwsts.reviewaction order by rvwsts.projectlistingdsp ";
      $rs = $conn->prepare($sql);
      $rs->execute();
      if ($rs->rowCount() < 1) { 
          $this->responseCode = 404;
      } else { 
        $this->itemsFound = $rs->rowCount();  
        $val = array();  
        while ($r = $rs->fetch(PDO::FETCH_ASSOC)) { 
            $val[] = $r;
        }
        $this->rtnData = $val;
        $this->responseCode = 200;
      }
    } else {  
      $this->responseCode = 403;    
    }
    $rtn = array("MESSAGE" => $this->message, "ITEMS" => $this->itemsFound, "DATA" => $this->rtnData);
    $rows['statusCode'] = $this->responseCode;
    $rows['data'] = $rtn;
    return $rows; 
  }
  
function projectsbystatus($request, $passedData, $rUsr, $rSession) { 
    require(genAppFiles .  "/dataconn/sspdo.zck");
    $pDta = json_decode($passedData, true);
    $qsts = json_decode($pDta['datapayload'], true);    
    $lookupSQL = "select if(ifnull(projtostatus.statusmodifier,'') = '',ifnull(projtostatus.datastatus,''), ifnull(projtostatus.statusmodifier,'')) as projectStatus , substr(concat('000000',projtostatus.projectid),-6) as dspprojectid, projtostatus.userid, projtostatus.submitByWho submittingpennkey, ifnull(projtostatus.projectpdf,'') as projectpdffilename, projtostatus.projecttitle, projtostatus.irbnbr, projtostatus.irbexpiration, projtostatus.statusby laststatusby, projtostatus.statusdate, ifnull(projtostatus.pfcapprovalnumber,'') as pfcapprovalnbr , pi.contactName as piname, ifnull(conPhn.phnnbr,'') as piphone, ifnull(conEml.eml,'') as piemail from (SELECT prj.*, ps.statusid as joinstatid, projsts.* from pfc.ut_projects prj left join pfc.appdata_project_statuses ps on ps.statusid = (SELECT statusid FROM pfc.appdata_project_statuses where projid = prj.projectid order by statusdate desc limit 1) left join pfc.appdata_project_statuses projsts on ps.statusid =  projsts.statusid) as projtostatus left join (SELECT projContId, projid, contactName  FROM pfc.ut_projects_contacts where contactType = 'PROJECT-PI') pi on projtostatus.projectid = pi.projid left join (SELECT contactid, metric as phnnbr FROM pfc.ut_projects_contacts_metrics where typeOfContMet = 'PHONE') as conPhn on pi.projContId = conPhn.contactid left join (SELECT contactid, metric as eml FROM pfc.ut_projects_contacts_metrics where typeOfContMet = 'EMAIL') as conEml on pi.projContId = conEml.contactid where if(ifnull(projtostatus.statusmodifier,'') = '',ifnull(projtostatus.datastatus,''), ifnull(projtostatus.statusmodifier,'')) = :qryStatus order by projtostatus.statusdate desc";
   $rs = $conn->prepare($lookupSQL);
   $rs->execute(array(':qryStatus' => $qsts['qryStatus']));
   if ($rs->rowCount() < 1) { 
       $this->responseCode = 404;
       $this->itemsFound = $rs->rowCount();
       $this->message = "No Projects with a status of {$qsts['qryStatus']} found"; 
   } else { 
       $this->itemsFound = $rs->rowCount();
       $projLst = array();
       while ($r = $rs->fetch(PDO::FETCH_ASSOC)) { 
           $projLst[] = $r;
       }
       $this->message = $qsts['qryStatus'];
       $this->rtnData = $projLst;
       $this->responseCode = 200;
   }
   $rtn = array("MESSAGE" => $this->message, "ITEMS" => $this->itemsFound, "DATA" => $this->rtnData);
   $rows['statusCode'] = $this->responseCode;
   $rows['data'] = $rtn;
   return $rows; 
}

function getmyprojects($request, $passedData, $rUsr, $rSession) {  
   $pDta = json_decode($passedData, true);
   $pKey = chtndecrypt( $pDta['pennkey'] );
   if ($pKey === "") { 
       //ERROR - EMPTY PENNKEY
   } else { 
     require(genAppFiles .  "/dataconn/sspdo.zck");
     $prjSQL = "SELECT substr(concat('000000',ifnull(pj.projectid,'')),-6) as projectid, pj.projectpdf, pj.projecttitle, pj.irbnbr, pj.irbexpiration, pj.completeind, pj.pfcapprovalnumber, pj.pfcapprovalexpiration, date_format(pj.submitonwhen,'%m/%d/%Y') as projectcreationdate, cn.contactname as projectpi, ps.datastatus, ps.statusmodifier, date_format(ps.statusdate, '%m/%d/%Y %H:%i') as statusdate FROM pfc.ut_projects pj left join (SELECT contactname, projid FROM pfc.ut_projects_contacts  where contactType = 'PROJECT-PI') cn on pj.projectid = cn.projid left join pfc.appdata_project_statuses ps on ps.statusid = (select sbst.statusid from pfc.appdata_project_statuses sbst where sbst.projid = pj.projectid order by sbst.statusdate desc limit 1) where pennkey = :pennkey order by submitonwhen desc";
     $prjR = $conn->prepare($prjSQL);
     $prjR->execute(array(':pennkey' => $pKey));
        
   if ($prjR->rowCount() < 1) { 
       $this->responseCode = 404;
       $this->itemsFound = $prjR->rowCount();
       $this->message = "No Projects for this user found"; 
   } else { 
       $this->itemsFound = $prjR->rowCount();
       $projLst = array();
       while ($r = $prjR->fetch(PDO::FETCH_ASSOC)) { 
           $projLst[] = $r;
       }
       $this->message = "";
       $this->rtnData = $projLst;
       $this->responseCode = 200;
   }
   }
   $rtn = array("MESSAGE" => $this->message, "ITEMS" => $this->itemsFound, "DATA" => $this->rtnData);
   $rows['statusCode'] = $this->responseCode;
   $rows['data'] = $rtn;
   return $rows; 
}

function getprojectbymember($request, $passedData, $rUsr, $rSession) {
   $pDta = json_decode($passedData, true);
   $pKey = chtndecrypt( $pDta['pennkey'] );
   $pid = $pDta['projectid'];
   require(genAppFiles .  "/dataconn/sspdo.zck");
   $memberChkSQL = "SELECT pfcmemberid FROM pfc.sys_pfcmember_pennkey where allowQry = 1 and pfcpennkeyref = :memberkey";
   $memberChkR = $conn->prepare($memberChkSQL); 
   $memberChkR->execute(array(':memberkey' => $pKey)); 
   if ($memberChkR->rowCount() < 1) { 
     $this->responseCode = 400;
     $this->message = "USER NOT ALLOWED";
   } else { 
     
     
       $projSQL = "SELECT usr.pennkey, usr.firstname, usr.lastname, substr(concat('000000',ifnull(pj.projectid,'')), -6) as projectid, pj.projectpdf, pj.projecttitle, pj.irbnbr, pj.irbexpiration, ifnull(pj.approvalyear,'') as approvalyear, pj.completeind, ifnull(pj.pfcapprovalnumber,'') as pfcapprovalnumber, ifnull(pj.pfcapprovalexpiration,'') as pfcapprovalexpiration, date_format(pj.submitonwhen, '%m/%d/%Y') as submissiondate, cmt.projcomments, cmt.bywhom FROM pfc.ut_projectUsers usr left join pfc.ut_projects pj on usr.pennkey = pj.pennkey left join pfc.ut_projects_comments cmt on pj.projectid = cmt.projectid where pj.projectid = :projnbr";
   $projR = $conn->prepare($projSQL); 
   $projR->execute(array(':projnbr' => $pid));
   if ($projR->rowCount() < 1) { 
       $this->responseCode = 404;
       $this->itemsFound = 0;
       $this->message = "NO PROJECT FOUND WITH PROJECT NUMBER: {$pid} FOR THIS USER";
       $this->rtnData = "";
   } else { 
       $proj = $projR->fetch();

       if ($proj['completeind'] <> 1) { 
           //CHANGE INTERNAL STATUS TO 'IN REVIEW' - SINCE IT WAS CLICKED IF THE COMPLETE IND IS NOT TRUE
           $updSQL = "insert into pfc.appdata_project_statuses(datastatus, statusmodifier, statusdate, projid, applicationModule, statusby) values (:datastatus, :statusmodifier, now(), :projid, 'PROJECT-PFRP-EDIT', :statusby) ";
           $updR = $conn->prepare($updSQL);
           $updR->execute(array(':datastatus' => 'IN REVIEW', ':statusmodifier' => '', ':projid' => $pid, ':statusby' => $pKey));
       } 
       $projDta = array();
       $projDta['pennkey'] = $proj['pennkey'];
       $projDta['firstname'] = $proj['firstname'];
       $projDta['lastname'] = $proj['lastname'];
       $projDta['projectid'] = $proj['projectid'];
       $projDta['projectpdf'] = $proj['projectpdf'];
       $projDta['projecttitle'] = $proj['projecttitle'];
       $projDta['irbnbr'] = $proj['irbnbr'];
       $projDta['irbexpiration'] = $proj['irbexpiration'];
       $projDta['approvalyear'] = $proj['approvalyear'];
       $projDta['completeind'] = $proj['completeind'];
       $projDta['pfcapprovalnumber'] = $proj['pfcapprovalnumber'];
       $projDta['pfcapprovalexpiration'] = $proj['pfcapprovalexpiration'];
       $projDta['submissiondate'] = $proj['submissiondate'];
       $projDta['projectcomments'] = $proj['projcomments'];
       $projDta['bywhom'] = $proj['bywhom'];
       $docSQL = "SELECT ucase(ifnull(doc.typeofdocument,'')) as typeofdocument, ifnull(originaldocumentname,'PFRP-INTERNAL-DOCUMENT') as originaldocumentname, directorydocumentname, date_format(uploadedon,'%m/%d/%Y') as uploadedon, uploadedby FROM pfc.ut_projects_documents doc where projectid = :projid";
       $docR = $conn->prepare($docSQL); 
       $docR->execute(array(':projid' => $pid));
       $docs = array(); 
       while ($dr = $docR->fetch(PDO::FETCH_ASSOC)) { 
         $docs[] = $dr;
       }
       $projDta['documents'] = $docs;
       $contSQL = "SELECT cnt.projcontid, cnt.contactname, cnt.salutation, cnt.degrees, cnt.contacttype, phn.metric as phonenbr, eml.metric as emailaddress FROM pfc.ut_projects_contacts cnt left join (SELECT metric, contactid FROM pfc.ut_projects_contacts_metrics where typeOfContMet = 'PHONE') phn on cnt.projcontid = phn.contactid left join (SELECT metric, contactid FROM pfc.ut_projects_contacts_metrics where typeOfContMet = 'EMAIL') eml on cnt.projcontid = eml.contactid where projid = :projid";
       $contR = $conn->prepare($contSQL); 
       $contR->execute(array(':projid' => $pid));
       $contacts = array();
       $contacts = $contR->fetchAll(PDO::FETCH_ASSOC);
       $projDta['contacts'] = $contacts;
       $answerSQL = "SELECT qa.answerid, qs.question, if(qa.answer = 1, 'YES','NO') as answer FROM pfc.ut_projects_questionanswers qa left join pfc.sys_project_questions qs on qa.questionid = qs.questionapplicationid where qa.projectid = :projid order by qs.dspord";
       $qaR = $conn->prepare($answerSQL); 
       $qaR->execute(array(':projid' => $pid));
       $qanda = array();
       $qanda = $qaR->fetchAll(PDO::FETCH_ASSOC);
       $projDta['questionanswers'] = $qanda;
       $prjStsSQL = "SELECT datastatus, ifnull(statusmodifier,'') as statusmodifier, date_format(statusdate,'%m/%d/%Y %H:%i') as statusdate, ifnull(lettercomments,'') as lettercomments FROM pfc.appdata_project_statuses where projid = :projid"; 
       $prjStsR = $conn->prepare($prjStsSQL); 
       $prjStsR->execute(array(':projid' => $pid)); 
       $proStatus = array();
       $projStatus = $prjStsR->fetchAll(PDO::FETCH_ASSOC); 
       $projDta['statuses'] = $projStatus;
       $this->message = "";
       $this->rtnData = $projDta;
       $this->responseCode = 200;
   }
   }
   $rtn = array("MESSAGE" => $this->message, "ITEMS" => $this->itemsFound, "DATA" => $this->rtnData);
   $rows['statusCode'] = $this->responseCode;
   $rows['data'] = $rtn;
   return $rows; 
}

function getaproject($request, $passedData, $rUsr, $rSession) {  
   $pDta = json_decode($passedData, true);
   $pKey = chtndecrypt( $pDta['pennkey'] );
   $pid = $pDta['projectid'];
   $pfrpid = $pDta['pfrpid'];
   require(genAppFiles .  "/dataconn/sspdo.zck");
   $projSQL = "SELECT usr.pennkey, usr.firstname, usr.lastname, substr(concat('000000',ifnull(pj.projectid,'')), -6) as projectid, pj.projectpdf, pj.projecttitle, pj.irbnbr, pj.irbexpiration, pj.approvalyear, pj.completeind, pj.pfcapprovalnumber, pfcapprovalexpiration, date_format(pj.submitonwhen, '%m/%d/%Y') as submissiondate, cmt.projcomments, cmt.bywhom FROM pfc.ut_projectUsers usr left join pfc.ut_projects pj on usr.pennkey = pj.pennkey left join pfc.ut_projects_comments cmt on pj.projectid = cmt.projectid where usr.pennkey = :pennkey and usr.pfrpid = :pfrpid and pj.projectid = :projnbr";
   $projR = $conn->prepare($projSQL); 
   $projR->execute(array(':pennkey' => $pKey, ':pfrpid' => $pfrpid, ':projnbr' => $pid));
   if ($projR->rowCount() < 1) { 
       $this->responseCode = 404;
       $this->itemsFound = 0;
       $this->message = "NO PROJECT FOUND WITH PROJECT NUMBER: {$pid} FOR THIS USER";
       $this->rtnData = "";
   } else { 
       $proj = $projR->fetch();
       $projDta = array();
       $projDta['pennkey'] = $proj['pennkey'];
       $projDta['firstname'] = $proj['firstname'];
       $projDta['lastname'] = $proj['lastname'];
       $projDta['projectid'] = $proj['projectid'];
       $projDta['projectpdf'] = $proj['projectpdf'];
       $projDta['projecttitle'] = $proj['projecttitle'];
       $projDta['irbnbr'] = $proj['irbnbr'];
       $projDta['irbexpiration'] = $proj['irbexpiration'];
       $projDta['approvalyear'] = $proj['approvalyear'];
       $projDta['completeind'] = $proj['completeind'];
       $projDta['pfcapprovalnumber'] = $proj['pfcapprovalnumber'];
       $projDta['pfcapprovalexpiration'] = $proj['pfcapprovalexpiration'];
       $projDta['submissiondate'] = $proj['submissiondate'];
       $projDta['projectcomments'] = $proj['projcomments'];
       $projDta['bywhom'] = $proj['bywhom'];
       $docSQL = "SELECT ucase(ifnull(doc.typeofdocument,'')) as typeofdocument, ifnull(originaldocumentname,'PFRP-INTERNAL-DOCUMENT') as originaldocumentname, directorydocumentname, date_format(uploadedon,'%m/%d/%Y') as uploadedon, uploadedby FROM pfc.ut_projects_documents doc where projectid = :projid";
       $docR = $conn->prepare($docSQL); 
       $docR->execute(array(':projid' => $pid));
       $docs = array(); 
       while ($dr = $docR->fetch(PDO::FETCH_ASSOC)) { 
         $docs[] = $dr;
       }
       $projDta['documents'] = $docs;
       $contSQL = "SELECT cnt.projcontid, cnt.contactname, cnt.salutation, cnt.degrees, cnt.contacttype, phn.metric as phonenbr, eml.metric as emailaddress FROM pfc.ut_projects_contacts cnt left join (SELECT metric, contactid FROM pfc.ut_projects_contacts_metrics where typeOfContMet = 'PHONE') phn on cnt.projcontid = phn.contactid left join (SELECT metric, contactid FROM pfc.ut_projects_contacts_metrics where typeOfContMet = 'EMAIL') eml on cnt.projcontid = eml.contactid where projid = :projid";
       $contR = $conn->prepare($contSQL); 
       $contR->execute(array(':projid' => $pid));
       $contacts = array();
       $contacts = $contR->fetchAll(PDO::FETCH_ASSOC);
       $projDta['contacts'] = $contacts;
       $answerSQL = "SELECT qa.answerid, qs.question, if(qa.answer = 1, 'YES','NO') as answer FROM pfc.ut_projects_questionanswers qa left join pfc.sys_project_questions qs on qa.questionid = qs.questionapplicationid where qa.projectid = :projid order by qs.dspord";
       $qaR = $conn->prepare($answerSQL); 
       $qaR->execute(array(':projid' => $pid));
       $qanda = array();
       $qanda = $qaR->fetchAll(PDO::FETCH_ASSOC);
       $projDta['questionanswers'] = $qanda;
       $prjStsSQL = "SELECT datastatus, ifnull(statusmodifier,'') as statusmodifier, date_format(statusdate,'%m/%d/%Y %H:%i') as statusdate, ifnull(lettercomments,'') as lettercomments FROM pfc.appdata_project_statuses where projid = :projid"; 
       $prjStsR = $conn->prepare($prjStsSQL); 
       $prjStsR->execute(array(':projid' => $pid)); 
       $proStatus = array();
       $projStatus = $prjStsR->fetchAll(PDO::FETCH_ASSOC); 
       $projDta['statuses'] = $projStatus;
       $this->message = "";
       $this->rtnData = $projDta;
       $this->responseCode = 200;
   } 
   $rtn = array("MESSAGE" => $this->message, "ITEMS" => $this->itemsFound, "DATA" => $this->rtnData);
   $rows['statusCode'] = $this->responseCode;
   $rows['data'] = $rtn;
   return $rows; 
}
 
function requireddocumentlist($request, $passedData, $rUsr, $rSession) {    
   require(genAppFiles .  "/dataconn/sspdo.zck");
   $docSQL = "SELECT  docid, documenttype, requiredind FROM pfc.appdata_project_document_type where requiredind = 1 and dspind = 1 order by orderind"; 
   $docR = $conn->prepare($docSQL); 
   $docR->execute(); 
   $documentListing = array(); 
   if ($docR->rowCount() > 0) { 
       while ($dr = $docR->fetch(PDO::FETCH_ASSOC)) { 
          $documentListing[] = $dr;
       }
       $this->itemsFound = $docR->rowCount();
       $this->rtnData = $documentListing;
       $this->responseCode = 200;
  }
   $rtn = array("MESSAGE" => $this->message, "ITEMS" => $this->itemsFound, "DATA" => $this->rtnData);
   $rows['statusCode'] = $this->responseCode;
   $rows['data'] = $rtn;
   return $rows;  
   
}

function sendpfrpreferal($request, $passedData, $rUsr, $rSession) {
    $pDta = json_decode($passedData, true);
    $emlArr = json_decode($pDta['datapayload'], true); 
    require(genAppFiles .  "/dataconn/sspdo.zck");

    $chkSQL = "SELECT pfcmemberid, memberemail FROM pfc.sys_pfcmember_pennkey where pfcpennkeyref = :pennkey";
    $chkR = $conn->prepare($chkSQL); 
    $chkR->execute(array(':pennkey' => $rUsr)); 
    if ($chkR->rowCount() < 1) { 
      $this->responseCode = 400; 
      $this->message = "USER ({$rUsr}) NOT ALLOWED";
    } else {
      $from = array();
      $from[] = $chkR->fetch(PDO::FETCH_ASSOC);
      $senderEmail = $from[0]['memberemail'];

      $recipChkSQL = "SELECT memberemail FROM pfc.sys_pfcmember_pennkey where pfcmemberid = :recipcode";
      $recipR = $conn->prepare($recipChkSQL); 
      $recipR->execute(array(':recipcode' => $emlArr['recip']));
      if ($recipR->rowCount() < 1) { 
        $this->responseCode = 500; 
        $this->message = "RECIPIENT EMAIL NOT FOUND ({$emlArr['recip']})";
      } else {
        $rTo = array(); 
        $rTo[] = $recipR->fetch(PDO::FETCH_ASSOC); 
        $recipEmail = $rTo[0]['memberemail'];
        if (trim($emlArr['proj']) === "") { 
          $this->responseCode = 500; 
          $this->message = "NO PROJECT ID LISTED";            
        }  else { 

           $at = genAppFiles;
           $pPic = base64file( "{$at}/publicobj/graphics/psom_logo_blue.png", "PSOMLogo", "image", true, " style=\"width: 1.5in;\" ");
           $header = "<table border=0 style=\"width: 7.75in;\"><tr><td>{$pPic}</td><td style=\"text-align: center;font-size: 1.2vh;font-family: tahoma, arial; font-weight: bold;\">Pathology Feasibility Review Panel (PFRP)<br>PROJECT REFERAL EMAIL</td><td style=\"width: 1.5in;\">&nbsp;</td></tr></table>";
           $footer = <<<HTMLFOOT
<table style="width: 720px;font-family: tahoma, arial; font-size: .8vh;padding-top: 50px;"><tr><td><center>Pathology Feasibility Review Panel (PFRP)<br>Hospital of the University of Pennsylvania<br>3400 Spruce Street, 6 FOUNDERS<br>Philadelphia, Pennsylvania 19104<br>(215) 662-4570</td></tr></table>
HTMLFOOT;
        
        //Format Referal Email 
        $emailBdy = <<<EMAILBODY
                <table><tr><td>PFRP Project ({$emlArr['proj']}) has been referred to you by {$senderEmail}. Please DO NOT response to this email, but redirect all comments to the referenced email address.   Their comments are below:</td></tr>
                <tr><td>{$emlArr['msg']}</td></tr>
                </table>
EMAILBODY;
        $email = $header . $emailBdy . $footer;       
        $notifyList = array(); 
        $notifyList[] = $recipEmail;
                
         $emlSQL = "insert into serverControls.emailthis (towhoaddressarray,sbjtline,msgbody,htmlind,wheninput, bywho) values(:recipArr,:subject,:htmlstuff,1,now(),:bywho)";
         $emlR = $conn->prepare($emlSQL); 
         $emlR->execute(array(":recipArr" => json_encode($notifyList), ":subject" => "PFRP REFERAL ({$emlArr['proj']})",":htmlstuff" => $email, ":bywho" => "PFRP-SYSTEM"));
                
        $this->responseCode = 200;
        $this->message = $emlArr['proj'];
        }
      }
    }
    $rtn = array("MESSAGE" => $this->message, "ITEMS" => $this->itemsFound, "DATA" => $this->rtnData);
    $rows['statusCode'] = $this->responseCode;
    $rows['data'] = $rtn;
    return $rows;
}

function pfrpdecision($request, $passedData, $rUsr, $rSession) { 
    $decDta = json_decode($passedData, true);
    $decArr = json_decode($decDta['datapayload'], true);
    $projid = (int)$decArr['proj'];
    $decisionid = $decArr['decision'];
    $lettercomments = $decArr['lettercomments'];
    $internalcomments = $decArr['internals']; 
    $copyme = $decArr['copyme'];
    require(genAppFiles .  "/dataconn/sspdo.zck");
    $chkAppSQL = "SELECT pfcpennkeyref, memberfirstname, memberlastname, memberemail, ifnull(lettersignline,'') as lettersignline FROM pfc.sys_pfcmember_pennkey where allowqry = 1 and approver = 1 and pfcpennkeyref = :pennkey";
    $chkApp = $conn->prepare($chkAppSQL); 
    $chkApp->execute(array(':pennkey' => $rUsr));
    if ($chkApp->rowCount() < 1) { 
      $this->responseCode = 403;
      $this->message = "USER IS NOT ALLOWED TO PERFORM THIS ACTION";
      $this->itemsFound = 0; 
    } else {    
      $chkProjStsSQL = "SELECT * FROM pfc.ut_projects where completeind = 0 and projectid = :projid"; 
      $chkProjStsR = $conn->prepare($chkProjStsSQL); 
      $chkProjStsR->execute(array(':projid' => $projid));
      if ($chkProjStsR->rowCount() < 1) { 
        $this->responseCode = 404;
        $this->message = "Project is already marked complete";
        $this->itemsFound = 0; 
      } else {
        $decSQL = "SELECT reviewaction, projectstatus, furtheractionind, completionactionind FROM pfc.appdata_project_reviewerstatus where actionid = :decision"; 
        $decR = $conn->prepare($decSQL); 
        $decR->execute(array(':decision' => $decisionid));
        if ($decR->rowCount() < 1) { 
          $this->responseCode = 500;
          $this->message = "DECISION METRIC NOT FOUND";
          $this->itemsFound = 0; 
        } else { 
          $decision = array(); 
          $decision = $decR->fetch(PDO::FETCH_ASSOC);
          $statusmodifier = $decision['reviewaction'];
          $datastatus = $decision['projectstatus'];
          $completeind = $decision['completionactionind'];
          if ((int)$completeind <> 1) { 
            $this->responseCode = 500;
            $this->message = "REVIEW DECISION MUST BE A COMPLETION STATUS";
            $this->itemsFound = 0; 
          } else {
            $statUpdSQL = "insert into pfc.appdata_project_statuses (datastatus, statusmodifier, furtherinfo, lettercomments, projid, applicationmodule, statusby, statusdate) values(:datastatus, :statusmodifier, :furtherinfo, :lettercomments, :projid, 'PFRP-REVIEW-PAGE-STATUS-UPDATE', :statusby, now())";
            $statUpdR = $conn->prepare($statUpdSQL); 
            $statUpdR->execute(array(
                ':datastatus' => $datastatus
              , ':statusmodifier' => $statusmodifier
              , ':furtherinfo' => trim($internalcomments)
              , ':lettercomments' => trim($lettercomments)
              , ':projid' => $projid
              , ':statusby' => $rUsr
            ));
            if ($datastatus === "REVIEW COMPLETE (APPROVED)") { 
                
              $yrApprSQL = "SELECT count(1) as yrapprove FROM pfc.ut_projects where approvalyear = :appyear";
              $yrApprR = $conn->prepare($yrApprSQL); 
              $cYear = (int)date('y');
              $yrApprR->execute(array(':appyear' => $cYear));
              $yrCnt = $yrApprR->fetch(PDO::FETCH_ASSOC);
              $ttlAprYr = $yrCnt['yrapprove'];
              $apprNbr = "PFRP-" . $cYear  . "-" . substr(('0000' . ((int)$ttlAprYr + 1)), -4);
              $updProjSQL = "update pfc.ut_projects set approvalYear = :apryr, completeind = 1, pfcapprovalnumber = :approvalnbr, pfcapprovalexpiration = date_format(date_add(now(), INTERVAL 1 year), '%Y-%m-%d') where projectid = :projid";
              $updProjR = $conn->prepare($updProjSQL); 
              $updProjR->execute(array(':apryr' => $cYear, ':approvalnbr' => $apprNbr, ':projid' => $projid));

              $letterElements = array('projid' => $projid, 'datastatus' => $datastatus, 'statusmodifier' => $statusmodifier, 'reviewer' => $rUsr, 'lettercomments' => trim($lettercomments));
              $letterTxt = buildpfrletter($letterElements);                            
              $this->message = "FINISHED";
              //BUILD LETTERS (APPROVAL) X
              //BUILD PICKUP FORM X
              //UPDATE PROJECT DOCUMENTS X
              //EMAIL LETTER AND PICKUP FORM TO SUBMITTER X
              $this->responseCode = 200;
            } else { 
              $updProjSQL = "update pfc.ut_projects set completeind = 1 where projectid = :projid";
              $updProjR = $conn->prepare($updProjSQL); 
              $updProjR->execute(array(':projid' => $projid));
              $letterElements = array('projid' => $projid, 'datastatus' => $datastatus, 'statusmodifier' => $statusmodifier, 'reviewer' => $rUsr, 'lettercomments' => trim($lettercomments));
              $letterTxt = buildpfrletter($letterElements);                            
              $this->message = "FINISHED";
              //BUILD LETTERS (DENIAL) X
              //UPDATE PROJECT DOCUMENTS X
              //EMAIL LETTER TO INVESTIGATOR SUBMITTER X
              $this->responseCode = 200;
            }
          }
        }
      }
    }
    
    $rtn = array("MESSAGE" => $this->message, "ITEMS" => $this->itemsFound, "DATA" => $this->rtnData);
    $rows['statusCode'] = $this->responseCode;
    $rows['data'] = $rtn;
    return $rows;    
}

function getpfrpdocument($request, $passedData, $rUsr, $rSession) { 
    $docDta = json_decode($passedData, true);
    $docArr = json_decode($docDta['datapayload'], true); 
    require(genAppFiles .  "/dataconn/sspdo.zck");
    $memSQL = "SELECT pfcmemberId FROM pfc.sys_pfcmember_pennkey where allowqry = 1 and pfcpennkeyref = :pennkey";
    $memR = $conn->prepare($memSQL);
    $memR->execute(array(':pennkey' => $rUsr)); 
    if ($memR->rowCount() < 1) { 
      $chkSQL = "SELECT pj.projectid, originalDocumentName, directorydocumentname FROM pfc.ut_projects_documents dc left join pfc.ut_projects pj on dc.projectid = pj.projectid where directorydocumentname = :docname and pennkey = :userpkey union
SELECT projectid, 'systemgeneratedpdf', projectpdf FROM pfc.ut_projects where pennkey = :userpkeyprj and projectpdf = :docnameprj"; 
      $r = $conn->prepare($chkSQL);
      $r->execute(array(':docname' => $docArr['qryDocument'], ':userpkey' => $rUsr,':docnameprj' => $docArr['qryDocument'], ':userpkeyprj' => $rUsr     ));
    } else { 
      $chkSQL = "SELECT pj.projectid, originalDocumentName, directorydocumentname FROM pfc.ut_projects_documents dc left join pfc.ut_projects pj on dc.projectid = pj.projectid where directorydocumentname = :docname union
SELECT projectid, 'systemgeneratedpdf', projectpdf FROM pfc.ut_projects where projectpdf = :docnameprj"; 
      $r = $conn->prepare($chkSQL);
      $r->execute(array(':docname' => $docArr['qryDocument'],':docnameprj' => $docArr['qryDocument'] ));
    }
    if ($r->rowCount() > 0) { 
       $documentLink = genAppFiles . "/publicobj/documents/pfrp/{$docArr['qryDocument']}";
       $documentBaseCode = base64file($documentLink, "PFRPDOCUMENT","DOCPDF", false);
       $this->rtnData = $documentBaseCode;
       $this->responseCode = 200; 
    } else { 
        $this->message = "USER NOT ALLOWED ACCESS TO THIS DOCUMENT";
        $this->rtnData = $docArr['qryDocument'];
    }
    $rtn = array("MESSAGE" => $this->message, "ITEMS" => $this->itemsFound, "DATA" => $this->rtnData);
    $rows['statusCode'] = $this->responseCode;
    $rows['data'] = $rtn;
    return $rows;      
}

function _clean($str) { 
  return is_array($str) ? array_map('_clean',$str) : str_replace('\\','\\\\',strip_tags(trim(htmlspecialchars((get_magic_quotes_gpc() ? stripslashes($str) : $str), ENT_QUOTES))));
}

function savepfrpapplication($request, $passedData, $rUsr, $rSession) { 
   $pDta = json_decode($passedData, true); 
   $vals = json_decode($pDta['datapayload'], true);
   $aKeys = array_keys($vals); 
   if (
       //TODO:  CHECK THESE FIELDS DYNAMICALLY
       trim($vals['fldProjecTitle']) === ""
    || trim($vals['fldprojectirbnbr']) === ""
    || trim($vals['fldprojectirbexp']) === ""
    || trim($vals['frmcontactsubmitterlname']) === ""
    || trim($vals['frmcontactsubmitterfname']) === ""
    || trim($vals['frmcontactsubmitterphone']) === ""
    || trim($vals['frmcontactsubmitteremail']) === ""
    || trim($vals['frmcontactpifname']) === ""
    || trim($vals['frmcontactpilname']) === ""
    || trim($vals['fldPISalutations']) === ""
    || trim($vals['frmcontactpiphone']) === ""
    || trim($vals['frmcontactpiemail']) === ""
    || trim($vals['fldAnswerIdqstnOne']) === ""
    || trim($vals['fldAnswerIdqstnTwo']) === ""
    || trim($vals['fldAnswerIdqstnThree']) === ""
    || trim($vals['fldAnswerIdqstnFour']) === ""
    || trim($vals['docPROJECT-PROTOCOL']) === ""
    || trim($vals['btoPROJECT-PROTOCOL']) === ""
    || trim($vals['docIRB-APPROVAL']) === ""
    || trim($vals['btoIRB-APPROVAL']) === ""
    || trim($vals['docCONSENT-FORM']) === ""
    || trim($vals['btoCONSENT-FORM']) === ""
   ) {
     //BAD FORM
     $this->responseCode = 400; 
     $this->message = "ALL FIELDS MARKED WITH A RED ASTERISK ARE REQUIRED";
   
   } else { 
     //CONTINUE ON
     //Validate Dates
     if (!validateDate($vals['fldprojectirbexp'], 'm/d/Y')) { 
       $this->responseCode = 500;
       $this->message = "NOT A VALID DATE (mm/dd/YYYY)";
     } else {
       $d = DateTime::createFromFormat('m/d/Y',$vals['fldprojectirbexp']);
       $irbexpiration = $d->format('Y-m-d');
       //Validate Emails
       if (!validateThisEmail($vals['frmcontactsubmitteremail']) || !validateThisEmail($vals['frmcontactpiemail'])) { 
         $this->responseCode = 500;
         $this->message = "ALL EMAIL ADDRESSES MUST BE VALID";
       } else {
         $rqstr = $rUsr;
         $ccemail = $vals['frmcontactsubmitteremail'];
         $projuserid = addpfcusr($rqstr, trim($vals['frmcontactsubmitterfname']), trim($vals['frmcontactsubmitterlname']));        
         $projectid = addpfcprojectdetails($vals, $projuserid, $rqstr, $irbexpiration);
         addpfccontacts($vals, $projectid, $rqstr);
         if (trim($vals['frmprojectcomments']) !== "") {
             addprojectcomments($vals, $projectid, $rqstr); 
         }
         addquestionanswers($vals, $projectid, $rqstr);
         documentreconstruction($vals, $projectid, $rqstr);
         $rtnprojDoc = buildpfrpapplicationpdf($vals, $projectid, $rqstr);
         require(genAppFiles .  "/dataconn/sspdo.zck");
         $notifySQL = "SELECT memberemail FROM pfc.sys_pfcmember_pennkey where notifyonsubmission = 1";
         $notifyR = $conn->prepare($notifySQL);
         $notifyR->execute();
         $notifyList = array(); 
         while ($nr = $notifyR->fetch(PDO::FETCH_ASSOC)) { 
           $notifyList[] = $nr['memberemail'];
         }
         $notifyList[] = $ccemail;
         $emlSQL = "insert into serverControls.emailthis (towhoaddressarray,sbjtline,msgbody,htmlind,wheninput, bywho) values(:recipArr,:subject,:htmlstuff,1,now(),:bywho)";
         $emlR = $conn->prepare($emlSQL); 
         $emlR->execute(array(":recipArr" => json_encode($notifyList), ":subject" => "PFRP Application Submission ({$projectid})",":htmlstuff" => $rtnprojDoc, ":bywho" => "PFRP-SYSTEM"));
         $this->message =  "{$projectid}";
         $this->responseCode = 200;
       }
     }
   } 

   $rtn = array("MESSAGE" => $this->message, "ITEMS" => $this->itemsFound, "DATA" => $this->rtnData);
   $rows['statusCode'] = $this->responseCode;
   $rows['data'] = $rtn;
   return $rows;      
} 

}
